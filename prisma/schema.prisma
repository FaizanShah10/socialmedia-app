// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  clerkId String @unique
  userName String @unique
  email String @unique
  name String
  bio String?
  image String?
  websiteUrl String?
  location String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts Posts[]
  likes Likes[]
  comments Comments[]


  notifications Notifications[] @relation("userNotifications")  //Notifications received by the user
  notificationsCreated Notifications [] @relation("notificationCreator")  //Notifications Created by the user
  
  followers Follows[]  @relation("following") //Person follow this user
  following Follows[] @relation("follower")   //person this user following


}

model Posts{
    id String @id @default(cuid())
    authorId String
    content String?
    image String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //relations
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade) //when user will be deleted then all his posts will be deleted
    comments Comments[]
    likes Likes[]
    notifications Notifications[]
    
}

model Likes {
    id String @id @default(cuid())
    userId String
    postId String
    CreatedAt DateTime @default(now())

    // relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Posts @relation(fields: [postId], references: [id], onDelete: Cascade) 

     @@index([userId,postId]) // composite index for faster queries
     @@unique([userId,postId]) // this prevents same user liking post twice
}

model Comments {
    id String @id @default(cuid())
    content String
    authorId String
    postId String
    createdAt DateTime @default(now())

    // Relations
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade) //Delete the comment if the user account is deleted
    post Posts @relation(fields: [postId], references: [id], onDelete: Cascade) //Delete all the comments if the post is deleted
    notifications Notifications[]
}

model Notifications {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Posts?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}


model Follows {
    followerId String
    followingId String

    follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("following",fields: [followingId], references: [id], onDelete: Cascade)

    @@index([followerId, followingId]) //composite index for faster query
    @@id([followerId, followingId]) //prevents for duplicate follow/following
}
